The functional requirements of our systems are below:
- User accounts: Users will have accounts where they’re able to perform different functionalities like log in, log out,
 add, delete, and update places’ information.
- Search: The users should be able to search for nearby places or places of interest based on their GPS location
(longitude, latitude) and/or the name of a place.
- Feedback: The users should be able to add a review about a place. The review can consist of images, text, and a rating.

The non-functional requirements of our systems are:
- High availability: The system should be highly available to the users.
- Scalability: The system should be able to scale up and down, depending on the number of requests. The number of requests
 can vary depending on the time and number of days. For example, there are usually more searches made at lunchtime than
 at midnight. Similarly, during tourist season, our system will receive more requests as compared to in other months of the year.
- Consistency: The system should be consistent for the users. All the users should have a consistent view of the data
regarding places, reviews, and images.
- Performance: Upon searching, the system should respond with suggestions with minimal latency.


API:
- GET: search(category, user_location, radius)
- POST: add_place(name_of_place, description_of_place, category, latitude, longitude, photo)
- POST: add_review(place_ID, user_ID, review_description, rating)

Components:
These are the components of our system:
- Segments producer: This component is responsible for communicating with the third-party world map data services
(for example, Google Maps). It takes up that data and divides the world into smaller regions called segments. The segment
 producer helps us narrow down the number of places to be searched.

- QuadTree servers: These are a set of servers that have trees that contain the places in the segments. A QuadTree server
 finds a list of places based on the given radius and the user’s provided location and returns that list to the user.
 This component mainly aids the search functionality.

- Aggregators: The QuadTrees accumulate all the places and send them to the aggregators. Then, the aggregators aggregate
 the results and return the search result to the user.

- Read servers: We use a set of read servers that we use to handle all the read requests. Since we have more read
requests, it’s efficient to separate these requests from the write requests. Each read server directs the search
requests to the QuadTrees’ servers and returns the results to the user.

- Write server: We use a set of write servers to handle all the write requests. Each write server handles the write
requests of the user and updates the storage accordingly. Examples for write requests include adding a place, writing a
comment, rating a place, and so on.

- Storage: We’ll use two types of storage to fulfill our diverse needs.

- SQL database: Our system will have different tables like “Users,” “Place,” “Reviews,” “Photos,” and others as described
 below. The data in these tables is inherently relational and structured. We need to perform queries like places a user
 visited, reviews they added, or view all the reviews of a specific place. It’s easy to perform such queries in a SQL-based
  database. We also want all users to have a consistent view of the data, and SQL-based databases are better suited for
  such use cases. We’ll use reliable and scalable databases, as is discussed in the Database building block.

- Key-value stores: We’ll need to fetch the places in a segment efficiently. For that, we store the list of places
against a segment ID in a key-value store to minimize searching time. We also save the QuadTree information in the
key-value store, by storing the QuadTree data against a unique ID.

-Load balancer: A load balancer distributes users’ incoming requests to all the servers uniformly.

Workflow:
- Searching a place: The load balancers route read requests to the read servers upon receiving them. The read servers
direct them to the QuadTree servers to find all the places that fall within the given radius. The QuadTree servers then
send the results to the aggregators to refine them and send them to the user.

- Adding a place or feedback: The load balancers route the write requests to the write servers upon receiving them.
Depending on the provided content, meaning the place information or review, the write servers add an entry in the
relational database and put all the related images in the blob storage.

- Making segments: The segment’s producer splits the world map taken from the third-party map service into smaller
segments. The places inside each segment are stored in a key-value store. Even though this is a one-time job, this
process is repeated periodically for newer segments and places. Since the probability of new places being added is low,
we update our segments every month.

- We use caches to store popular places. This allows us to fetch the places much faster.
Moreover, we also added a rating calculator that sorts the places based on their ratings