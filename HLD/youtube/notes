Functional requirements:
1. Stream videos
2. Upload videos
3. Search videos according to titles
4. Like and dislike videos
5. Add comments to videos
6. View thumbnails

Nonfunctional requirements:
1. High availability
2. Scalability
3. Good performance

# Important components:
Load balancers: To divide a large number of user requests among the web servers, we require load balancers.

Web servers: Web servers take in user requests and respond to them. These can be considered the interface to our API
servers that entertain user requests.

Application server: The application and business logic resides in application servers. They prepare the data needed by
the web servers to handle the end users’ queries.

User and metadata storage: Since we have a large number of users and videos, the storage required to hold the metadata
of videos and the content related to users must be stored in different storage clusters. This is because a large amount
of not-so-related data should be decoupled for scalability purposes.

Bigtable: For each video, we’ll require multiple thumbnails. Bigtable is a good choice for storing thumbnails because
of its high throughput and scalability for storing key-value data. Bigtable is optimal for storing a large number of
data items each below 10 MB. Therefore, it is the ideal choice for YouTube’s thumbnails.

Upload storage: The upload storage is temporary storage that can store user-uploaded videos.

Encoders: Each uploaded video requires compression and transcoding into various formats. Thumbnail generation service
is also obtained from the encoders.

CDN and colocation sites: CDNs and colocation sites store popular and moderately popular content that is closer to the
user for easy access. Colocation centers are used where it’s not possible to invest in a data center facility due to
business reasons.

# Resource estimation:
## to be done

# API design:
1. POST: uploadVideo(user_id, video_file, category_id, title, description, tags, default_language, privacy_settings)
2. GET: streamVideo(user_id, video_id, screen_resolution, user_bitrate, device_chipset)
3. GET: searchVideo(user_id, search_string, length, quality, upload_date)
4. GET: viewThumbnails(user_id, video_id)
5. POST: likeDislike(user_id, video_id, like)
6. POST: commentVideo(user_id, video_id, comment_text)

# Design Flow
- The user can upload a video by connecting to the web servers. The web server can run Apache or Lighttpd.
Lighttpd is preferable because it can serve static pages and videos due to its fast speed.
- Requests from the web servers are passed onto application servers that can contact various data stores to read or write
user, videos, or videos’ metadata. There are separate web and application servers because we want to decouple clients’
services from the application and business logic. Different programming languages can be used on this layer to perform
different tasks efficiently. For example, the C programming language can be used for encryption. Moreover, this gives
us an additional layer of caching, where the most requested objects are stored on the application server while the most
frequently requested pages will be stored on the web servers.
- Multiple storage units are used. Let’s go through each of these:
Upload storage is used to store user-uploaded videos temporarily before they are encoded.
User account data is stored in a separate database, whereas videos metadata is stored separately. The idea is to
separate the more frequently and less frequently accessed storage clusters from each other for optimal access time.
We can use MySQL if there are a limited number of concurrent reads and writes. However, as the number of users—and
therefore the number of concurrent reads and writes—grows, we can move towards NoSQL types of data management systems.
Since Bigtable is based on Google File System (GFS), it is designed to store a large number of small files with low
retrieval latency. It is a reasonable choice for storing thumbnails.
- The encoders generate thumbnails and also store additional metadata related to videos in the metadata database.
It will also provide popular and moderately popular content to CDNs and colocation servers, respectively.
- The user can finally stream videos from any available site.

## Encoding:
Each video can be divided into multiple timeframes and each is a chunk which can be encoded separately.
An uploaded video file can have Video, Audio and subtitles which can be extracted and processed.
Adaptive Streaming: While delivering the video to the client, based on the bandwith the encoded chunk for video, audio
and subtitle will be selected and delivered.

# Recommendation engine is also used to recommend videos to the user based on user profile, history and views, search, etc.
# Popular content chunks are cached at the ISP level, and youtube does the loading during the off-peak hours.
